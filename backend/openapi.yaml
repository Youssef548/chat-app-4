openapi: '3.0.2'
info:
  title: chat app api
  version: '1.0'
servers:
  - url: http://localhost:3000
tags:
  - name: auth
  - name: friends
  - name: message
  - name: avatar
  - name: users

paths:
  /auth/login:
    post:
      tags:
        - 'auth'
      description: login to the website
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
            example:
              {
                'username': 'this is my name',
                'password': 'this sis my pasword',
              }
      responses:
        '200':
          description: user has loged in
        '401':
          description: some thing wrong with username or password
          content:
            application/json:
              schema:
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                example:
                  { 'errors': ['something wrong with username or password'] }

  /auth/signup:
    post:
      tags:
        - 'auth'
      description: 'create new account'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string

            example:
              {
                'username': 'this is my name',
                'email': 'this is @email.com',
                'password': 'this sis my pasword',
              }
      responses:
        '200':
          description: account created sucssefuly
        '400':
          description: something went wrong
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
              example:
                {
                  'errors':
                    [
                      'Username must be spisified',
                      'Username must be between 4 and 12 characters',
                      'username already exists',
                    ],
                }
  /auth/islogged:
    get:
      tags:
        - 'auth'
      description: 'use it to check if user loggedin or not'
      responses:
        '200':
          description: user is logged in
        '401':
          description: user isn't logged in please make user login
  /auth/logout:
    get:
      tags:
        - 'auth'
      description: make user logout
      responses:
        '200':
          description: OK
  /friends:
    get:
      tags:
        - 'friends'
      description: 'return all last pepol this user messaged sorted by last message date'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
              example:
                [
                  { '_id': 'omar', 'latestDate': '2023-06-25T05:54:37.580Z' },
                  { '_id': 'osama', 'latestDate': '2023-06-25T05:54:34.740Z' },
                ]
        '401':
          description: you are not authorized please login
  /friends/{username}:
    get:
      summary: find if user exisits or not
      parameters:
        - name: username
          in: path
          description: username of the user to check
          required: true
          schema:
            type: string
      tags:
        - 'friends'
      description: 'see if spisific user exists or not'
      responses:
        '200':
          description: user exists

        '404':
          description: user not found
  /message:
    get:
      tags:
        - 'message'
      description: ''
      parameters:
        - name: page
          in: query
          description: The number of page every page is 15 messages
          required: true
          schema:
            type: integer
        - name: username
          in: query
          description: the name of the user to fetch messages for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
              example:
                [
                  {
                    _id: new ObjectId("649c9978ede13b7848421c76"),
                    sender: 'wwwwww',
                    receiver: 'aaaaaa',
                    date: '2023-06-28T20:35:04.402Z',
                    data: 'wrqrwqrqw',
                    __v: 0,
                  },
                  {
                    _id: new ObjectId("649c9973ede13b7848421c73"),
                    sender: 'wwwwww',
                    receiver: 'aaaaaa',
                    date: '2023-06-28T20:34:59.027Z',
                    data: 'wrqrwqrqw',
                    __v: 0,
                  },
                  {
                    _id: new ObjectId("649c9970ede13b7848421c70"),
                    sender: 'wwwwww',
                    receiver: 'aaaaaa',
                    date: '2023-06-28T20:34:56.707Z',
                    data: 'wrqrwqrqw',
                    __v: 0,
                  },
                ]
        '401':
          description: you are not authorized please login

  /avatar:
    post:
      tags:
        - 'avatar'
      description: update user avatar url for the user who is currently loged in
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
            example: { 'image': 'image url' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                  isSet:
                    type: boolean    
              example:
                {
                  "isSet":true,
                  "img":"img url" 
                }           
        '401':
          description: unauthorized
    get:
      tags:
        - "avatar"
      description: retrive data about 
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  isAvatarImageSet:
                    type: boolean
                  avatarImage:
                    type: string
                example:
                  {
                      "isAvatarImageSet": true,
                      "avatarImage": "https://urltoimg.png"
                  }
        '401':
          description: unauthorized
  /users:
    get:
      tags:
        - "users"
      description: fetch all users in the database except current loged user
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
              example:
                [
                  {
                      "username": "manga",
                      "email": "manga@gmail.com",
                      "avatarImage": "mangaimg.png"
                  },
                  {
                      "username": "osama",
                      "email": "osama@gmail.com",
                      "avatarImage": "osama.png"
                  },
                  {
                      "username": "marawan",
                      "email": "marawan@gmail.com",
                      "avatarImage": "marawan.png"
                  }
                ]
        '401':
          description: unauthorized
  /message/send:
    post:
      tags:
        - "message"
      description: send message to spisific user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  type: string
                message:
                  type: string
            example: { 'to': 'mohamed','message':'hellow' }
      
      responses:
        '200':
          description: OK
        '401':
          description: unauthorized
                

          
    
